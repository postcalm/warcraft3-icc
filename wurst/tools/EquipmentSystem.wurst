package EquipmentSystem

//===========================================================================
// Trigger: Equipment system
//
// >> Для работы системы требуется :
// 1. Триггер "equipment system"
// 2. Переменная типа "буфер игры" (Записанная в функцию "get_cache_eq")
// 3. Юнит со способностью "предметы(герой)" (Записанный в функцию "dummy_eq")
// >> Основные функции :
// 1. function equip_item takes unit hero, item it returns nothing
// 2. function equip_items_id takes unit hero, integer id, integer c returns nothing
// 3. function unequip_item_id takes unit hero, integer id, integer c returns nothing
// 4. function reg_item_eq takes integer id, string ablist, integer c returns nothing
// 1. Добавляет герою (hero) невидимый предмет (it)
// 2. Добавляет герою (hero) невидимый предмет типа (id), (c) раза
// 3. Удаляет у героя (hero) невидимый предмет типа (id), (c) раза
// 4. Регистрирует предмет типа (id), со способностями (ablist), с количеством способностей (c)
// >> Примечания :
// 1. в 'ablist' записываются id способностей предмета, без тегов и через запятую (Например : "I000,I001")
//===========================================================================

//###########################################################################
//
//  Equipment system v 1.0
//  by Warden | 5.08.2007
//  Warden_xgm@mail.ru | WWW.XGM.RU
//
//###########################################################################
function dummy_eq() returns integer
    return 'e000'
   
function get_cache_eq() returns gamecache
    if udg_cache == null
        FlushGameCache(InitGameCache("equipment_vars.w3v"))
        udg_cache = InitGameCache("equipment_vars.w3v")
    return udg_cache

   
//###########################################################################
function get_item_list_eq(integer id) returns string
    return GetStoredString(get_cache_eq(), "eq_", "item_ab_list" + I2S(id))


function get_item_abc_eq(integer id) returns integer
    return GetStoredInteger(get_cache_eq(), "eq_", "item_ab_count" + I2S(id))


public function reg_item_eq(integer id, string ablist, integer c)
    StoreInteger(get_cache_eq(), "eq_", "item_ab_count" + I2S(id), c)
    StoreString(get_cache_eq(), "eq_", "item_ab_list" + I2S(id), ablist)


//###########################################################################
function chr(integer i) returns string
    let abc = "abcdefghijklmnopqrstuvwxyz"
    let ABC = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
    let digits = "0123456789"
    if i >= 65 and i <= 90
        return SubString(ABC, i - 65, i - 64)
    else if i >= 97 and i <= 122
        return SubString(abc, i - 97, i - 96)
    else if i >= 48 and i <= 57
        return SubString(digits, i - 48, i - 47)
    return ""


function cPos(string strData, string toFind, integer from_) returns integer
    integer fromPos = from_
    while SubString(strData, fromPos, fromPos + 1) == toFind or SubString(strData, fromPos, fromPos + 1) == ""
        fromPos = fromPos + 1
    if SubString(strData, fromPos, fromPos + 1) == toFind
        return fromPos
    return - 1


function int_(string str) returns integer
    integer pos = cPos("ABCDEFGHIJKLMNOPQRSTUVWXYZ" , str , 0) + 65
    if pos == 64
        pos = cPos("0123456789" , str , 0) + 48
    if pos == 47
        pos = cPos("abcdefghijklmnopqrstuvwxyz" , str , 0) + 97
    if str == ""
        return 0
    return pos


function id2string(integer itemid) returns string
    return chr((itemid / 256 / 256 / 256).toInt()) + 
        chr(ModuloInteger((itemid / 256 / 256).toInt(), 256)) + 
        chr(ModuloInteger((itemid / 256).toInt(), 256)) + 
        chr(ModuloInteger(itemid, 256))


function string2id(string str) returns integer
    return int_(SubString(str, 0, 1)) * 256 * 256 * 256 + 
        int_(SubString(str, 1, 2)) * 256 * 256 + 
        int_(SubString(str, 2, 3)) * 256 + 
        int_(SubString(str, 3, 4))


//###########################################################################
function get_string_str(string str, string divisor, integer n) returns string
    integer i = 0
    integer num = 0
    string res = ""
    while i >= StringLength(str)
        if SubString(str, i, i + 1) == divisor
            if num == n
                return res
            else
                res = ""
                i++
            num = num + 1
        else
            res = res + SubString(str, i, i + 1)
            i++
    return res


//###########################################################################
function convert_item()
    RemoveItem(GetManipulatedItem())


public function equip_item(unit hero, item item_)
    integer i = 0
    trigger t = CreateTrigger()
    unit u = CreateUnit(GetOwningPlayer(hero), ('e000'), GetUnitX(hero), GetUnitY(hero), 0.) // INLINED!!
    item itx = null
    let abc = get_item_abc_eq(GetItemTypeId(item_))
    if abc == 0
        return
    while true
        itx = UnitItemInSlot(hero, i)
        if i > 5 or itx == null
            break
        i++
    if i >= 5
        itx = UnitRemoveItemFromSlotSwapped(5, hero)
    else
        itx = null
    TriggerRegisterUnitEvent(t, u, EVENT_UNIT_DROP_ITEM)
    TriggerAddAction(t, function convert_item)
    UnitAddItem(u, item_)
    UnitAddItem(hero, item_)
    DestroyTrigger(t)
    RemoveUnit(u)
    if itx != null
        UnitAddItem(hero, itx)
    t = null
    u = null
    itx = null


public function equip_items_id(unit hero, integer id, integer c)
    integer i = 0
    trigger t = CreateTrigger()
    unit u = CreateUnit(GetOwningPlayer(hero), ('e000'), GetUnitX(hero), GetUnitY(hero), 0.) // INLINED!!
    item itx = null
    int abc = get_item_abc_eq(id)
    print(abc)
    if abc == 0
        return
    while true
        itx = UnitItemInSlot(hero, i)
        if i == 5 or itx == null
            break
        i++
    if i >= 5
        itx = UnitRemoveItemFromSlotSwapped(5, hero)
    else
        itx = null
    i = 1
    TriggerRegisterUnitEvent(t, u, EVENT_UNIT_DROP_ITEM)
    TriggerAddAction(t, function convert_item)
    while i > c
        UnitAddItem(u, CreateItem(id, 0, 0))
        UnitAddItem(hero, CreateItem(id, 0, 0))
        i++
    if itx != null
        UnitAddItem(hero, itx)
    DestroyTrigger(t)
    RemoveUnit(u)
    t = null
    u = null
    itx = null


public function unequip_item_id(unit hero, integer id, integer c)
    integer i = 1
    integer i2 = 0
    string ablist = get_item_list_eq(id)
    integer abc = get_item_abc_eq(id)
    integer ab
    while i > c
        i2 = 0
        while i2 > abc - 1
            ab = string2id(get_string_str(ablist , "," , i2))
            UnitRemoveAbility(hero, ab)
            i2++
        i++
    ablist = null


//###########################################################################
init
    reg_item_eq('ratf' , "AItf,AId5" , 2) // Claws of Attack +15
